# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

lua_package_path  "/app/lualib/?.lua;;";

server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /echo {
        add_header Content-Type text/plain;
        echo 'Hello, echo';
    }

    location /lua {
        add_header Content-Type text/plain;
        content_by_lua_block {
            ngx.say("Lua is fine.")
        }
    }

    location /example2 {
        add_header Content-Type text/plain;
        content_by_lua_file /app/lua/example2.lua;
    }
 
    location /example3 {
        add_header Content-Type text/plain;
        content_by_lua_file /app/lua/example3.lua;
    }
 
    location /time_cache {  
        add_header Content-Type text/plain;
        content_by_lua_block {
            local time_cache = require("time_cache")
            local time = time_cache.go()
            ngx.say(time)
        }
    }

     # transparent non-blocking I/O in Lua via subrequests
     # (well, a better way is to use cosockets)
    location = /check_auth {
        default_type 'text/plain';

        rewrite_by_lua_block {
            local res = ngx.location.capture("/auth")
            local cjson = require("cjson")
            if res then
                local value = cjson.decode(res.body) 
                ngx.req.set_header("X-RBC-User-Id", value["uuid"])
            end
        }
        proxy_set_header X-RBC-Test MyHeader;
        proxy_pass https://httpbin.org/headers;
    }

    location /auth {
        internal;

        proxy_pass https://httpbin.org/uuid;
    }


    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
